# Description: Source configuration specification (this is used for both emission inputs and geometry inputs).

# This file is part of the FUME emission model.
#
# FUME is free software: you can redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FUME is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# Information and source code can be obtained at www.fume-ep.org
#
# Copyright 2014-2023 Institute of Computer Science of the Czech Academy of Sciences, Prague, Czech Republic
# Copyright 2014-2023 Charles University, Faculty of Mathematics and Physics, Prague, Czech Republic
# Copyright 2014-2023 Czech Hydrometeorological Institute, Prague, Czech Republic
# Copyright 2014-2017 Czech Technical University in Prague, Czech Republic

# input file format
file_type = option('text', 'shp', 'netcdf')   # text, shapefile and netcdf files supported
encoding = string(default='utf8')   # encoding

# determines the type of data - both emission (mass per time) and activity data (used by external emission models) are supported 
data_type = option('E', 'C', 'D', default='E')  # E - emission; C - count, e.g. number of cars; D - density, e.g density of roads

# source type
src_type = option('P', 'A', 'L')

# text file options
field_delimiter = string(default=',')   # column/field delimiter in the text file
text_delimiter = string(default=None)   # string delimiter

# this part configures how specie and categries are given in the input file
specie_input_type = option('column', 'row', 'predef', default = 'column')
specie_name = string(default=None) # for specie_input_types = row or predef, for row this is the name of the column with specie names, for predef, this is the predefined specie for whole file
specie_val_col = string(default='EMISSION') # in case nor specie_input_type nor category_input_type is column, it is needed to give the name where values of species are given

category_input_type = option('column', 'row', 'predef', default = 'row')
category_name = string(default=None) # for category_input_types = row or predef, for row this is the name of the column with categories, for predef, this is the predefined category for whole file

# deprecated !!! 
category = string(default=None)        # this defines a name of column from which the category of each row is read, equals category_input_type = row, category_name = category
category_def = string(default=None)    # this defines one category for whole file, equals category_input_type = predef, category_name = category_def

# defines a column(s) name where a unique id (generaly a string) of each source is found, can be more than one column
source_id = force_list(default=None)

# only for point sources - additional point sources parameters, list of two, where the first item is a name of column and the second are units. If units are not defined - SI units are assumed.
height = string_list(min=2, max=2, default=list('', meter))   # height 
diameter = string_list(min=2, max=2, default=list('', meter)) # diameter
temperature = string_list(min=2, max=2, default=list('', kelvin)) # temperature
velocity = string_list(min=2, max=2, default=list('', meter/second)) # velocity

# optional - read only data that satisfy following conditions (e.g. subset_cond = SourceType = Area, height != 0)
subset_cond = force_list(default=list())

# netcdf parameters
netcdf_dims = force_list(default=list()) # list of dimension which should be read - order matters (only variables which has exactly those dimension will be read) - if empty all dims found in netcdf will be used
netcdf_dimvars = force_list(default=list()) # list of variables associated to the dimensions (in same order) - if not present same names as for dimension will be tried, can contain None, if only some variables are present. In case of None the dimension will be indexed from 1
netcdf_timedim = string(default=None)   # name of the time dimension

# geometry information start ----------------

# geometry source inv., name and version
# we need to supply this information in case we wish to reuse the geometry 
geom_name = string(default=None)

# optional - separate geometry info files - geometry informations can be provided in separate geometry file
# these files are appended to main file config and are they processed sequentialy (with different filters)
# this is convenient in case when one input file contains data with different geometries
geom_info = force_list(default=None)

# type of geometry file format
# if file_type is shp then geometry is assigned the same and this option need not be set
# grid_from_points - from defined grid centers, creates rectangular polygons 
# grid_from_parameters - separately defined grid, it is tied to sources by ind_east and ind_north indexes - x,y or i,j of the grid. Indexing is assumed from the low-left corner from 1
# infile - only for text files and point sources - coordinates defined in files as columns
geom_type = option('shp', 'grid_from_points', 'infile', 'grid_from_parameters', default='shp')

# grid_from_points geometry parameters
# define coordinates columns (cell center for area sources) (not possible for line)
crd_east = string(default=None) 
crd_north = string(default=None)

# grid_from_parameters geometry parameters
# define index field names 
ind_east = string(default=None)          # x axis
ind_north = string(default=None)         # y axis
xcorn = float(default=None)      # ! center of the low-left corner of the grid !
ycorn = float(default=None)      # ! center of the low-left corner of the grid !

# for both grid_from_points and grid_from_parameters
# grid cell extent
grid_dx = float(default=None)  
grid_dy = float(default=None)  

# names of key columns of geometry
geom_id = force_list(default=None)

# coordinate spatial reference system
# if both given EPSG has higher priority, in  case of shp file, the info in prj file has highest priority
EPSG = integer(default=-1)
proj4 = string(default='') 

# optional - weight for surrogate geometry
weight = string(default=None)        # this defines a name of column from which the weight of each row is read

# optional - fix oveplaps (useful for surrogate geometries)
fix_overlaps = boolean(default=False) # if True, the sql function checking and fixing the overlapping geometries is called

# geometry information end ---------------
